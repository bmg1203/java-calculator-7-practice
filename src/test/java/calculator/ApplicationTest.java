package calculator;

import camp.nextstep.edu.missionutils.test.NsTest;
import org.junit.jupiter.api.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.MethodSource;
import org.junit.jupiter.params.provider.ValueSource;
import utils.ExceptionMessages;

import java.util.stream.Stream;

import static camp.nextstep.edu.missionutils.test.Assertions.assertSimpleTest;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

class ApplicationTest extends NsTest {

    @Nested
    @DisplayName("Ïª§Ïä§ÌÖÄ Íµ¨Î∂ÑÏûê ÌÖåÏä§Ìä∏")
    class CustomSeparatorTest{

        // ==== Assertions.assertAll Ï†ÅÏö© ====
        @Test
        void Ïª§Ïä§ÌÖÄ_Íµ¨Î∂ÑÏûê_ÏÇ¨Ïö©() {
            Assertions.assertAll(
                    () -> {
                        run("//;\\n1");
                        assertThat(output()).contains("Í≤∞Í≥º : 1");
                    },
                    () -> assertThatThrownBy(() -> runException("//üòÄ\\n1üòÄ2üòÄ3"))
                            .isInstanceOf(IllegalArgumentException.class)
                            .hasMessage(ExceptionMessages.CUSTOM_SEPARATOR_ONE_BYTE_REQUIRED),
                    () -> assertThatThrownBy(() -> runException("//„Ñ±„Ñ±\\n1„Ñ±„Ñ±2„Ñ±„Ñ±3"))
                            .isInstanceOf(IllegalArgumentException.class)
                            .hasMessage(ExceptionMessages.CUSTOM_SEPARATOR_ONE_BYTE_REQUIRED),
                    () -> assertThatThrownBy(() -> runException("//2\\n12325"))
                            .isInstanceOf(IllegalArgumentException.class)
                            .hasMessage(ExceptionMessages.CUSTOM_SEPARATOR_CANNOT_BE_NUMBER)
            );

        }

        // ==== ValueSource Ï†ÅÏö©Ìï¥Î≥¥Í∏∞ ====
        @ParameterizedTest
        @ValueSource(strings = { "//;\\n1;2;3", "//„Öé\\n1„Öé2„Öé3", "//„Ñ±\\n1„Ñ±2:3", "//n\\n1n2:2,1", "//-\\n1-2-2,1", "//\"\\n1\"2\"3"})
        void Í∞ÄÎä•Ìïú_Ïª§Ïä§ÌÖÄ_Íµ¨Î∂ÑÏûê_ÏÇ¨Ïö©(String input) {
            assertSimpleTest(() -> {
                run(input);
                assertThat(output()).contains("Í≤∞Í≥º : 6");
            });
        }

        // ==== MethodSource Ï†ÅÏö©Ìï¥Î≥¥Í∏∞ ====
        static Stream<Arguments> customInputs() {
            return Stream.of(
                    Arguments.of("ÏßÄÏ†ïÎêòÏßÄ ÏïäÏùÄ Ïª§Ïä§ÌÖÄ Î¨∏Ïûê ÏÇ¨Ïö©", "//;\\n1;2„Ñ±3", ExceptionMessages.INVALID_CHARACTER_IN_INPUT),
                    Arguments.of("Ïù¥Î™®Ìã∞ÏΩò Íµ¨Î∂ÑÏûê ÏÇ¨Ïö©", "//üòÄ\\n1üòÄ2üòÄ3", ExceptionMessages.CUSTOM_SEPARATOR_ONE_BYTE_REQUIRED),
                    Arguments.of("ÎëêÍ∏ÄÏûê Íµ¨Î∂ÑÏûê ÏÇ¨Ïö©", "//„Ñ±„Ñ±\\n1„Ñ±„Ñ±2:3", ExceptionMessages.CUSTOM_SEPARATOR_ONE_BYTE_REQUIRED),
                    Arguments.of("Ïà´Ïûê Íµ¨Î∂ÑÏûê ÏÇ¨Ïö©", "//2\\n12325", ExceptionMessages.CUSTOM_SEPARATOR_CANNOT_BE_NUMBER)
            );
        }

        @ParameterizedTest(name = "{index} - {0}")
        @MethodSource("customInputs")
        void Î∂àÍ∞ÄÎä•Ìïú_Ïª§Ïä§ÌÖÄ_Íµ¨Î∂ÑÏûê_ÏÇ¨Ïö©(String description, String input, String exceptionMessage) {
            assertSimpleTest(() ->
                    assertThatThrownBy(() -> runException(input))
                            .isInstanceOf(IllegalArgumentException.class)
                            .hasMessage(exceptionMessage)
            );
        }


        // ==== CsvSource Ï†ÅÏö©Ìï¥Î≥¥Í∏∞ ====
        /*
        @ParameterizedTest(name = "{index} - {0}")
        @CsvSource({
                "'ÏßÄÏ†ïÎêòÏßÄ ÏïäÏùÄ Ïª§Ïä§ÌÖÄ Î¨∏Ïûê ÏÇ¨Ïö©', '//;\\n1;2„Ñ±3'",
                "'Ïù¥Î™®Ìã∞ÏΩò Íµ¨Î∂ÑÏûê ÏÇ¨Ïö©', '//üòÄ\\n1üòÄ2üòÄ3'",
                "'Ï§ëÎ≥µ Î¨∏Ïûê Íµ¨Î∂ÑÏûê ÏÇ¨Ïö©', '//„Ñ±„Ñ±\\n1„Ñ±„Ñ±2:3'",
                "'Ïà´Ïûê Íµ¨Î∂ÑÏûê ÏÇ¨Ïö©', '//2\\n12325'"
        })
        void Î∂àÍ∞ÄÎä•Ìïú_Ïª§Ïä§ÌÖÄ_Íµ¨Î∂ÑÏûê_ÏÇ¨Ïö©_ÌÖåÏä§Ìä∏3(String description, String input) {
            assertSimpleTest(() ->
                    assertThatThrownBy(() -> runException(input))
                            .isInstanceOf(IllegalArgumentException.class)
            );
        }
         */

        @Test
        void Ïª§Ïä§ÌÖÄ_Íµ¨Î∂ÑÏûêÎ•º_ÏùåÏàòÍ∏∞Ìò∏Î°ú_ÏßÄÏ†ïÌïòÍ≥†_ÏùåÏàòÎ•º_ÏûÖÎ†•Ìïú_Í≤ΩÏö∞(){
            // [1, 2, null, 3] ÏúºÎ°ú Î∂ÑÎ¶¨ÌïòÍ≤å ÎêòÎØÄÎ°ú, Ïà´ÏûêÍ∞Ä ÏïÑÎãàÎùºÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌï¥Ïïº ÌïúÎã§.
            assertSimpleTest(() ->
                    assertThatThrownBy(() -> runException("//-\\n1,2,-3"))
                            .isInstanceOf(IllegalArgumentException.class)
                            .hasMessage(ExceptionMessages.NON_NUMERIC_VALUE)
            );
        }
    }


    @ParameterizedTest(name = "{index} - {0}")
    @CsvSource({
            "'Í∏∞Î≥∏ Íµ¨Î∂ÑÏûê ÌòºÌï©(: ,) ÏÇ¨Ïö©', '1:2,3'",
            "'Í∏∞Î≥∏ Íµ¨Î∂ÑÏûê(:) Íµ¨Î∂ÑÏûê ÏÇ¨Ïö©', '1:2:3'",
            "'Í∏∞Î≥∏ Íµ¨Î∂ÑÏûê(,) Íµ¨Î∂ÑÏûê ÏÇ¨Ïö©', '1,2,3'"
    })
    void Í∏∞Î≥∏_Íµ¨Î∂ÑÏûê_ÏÇ¨Ïö©(String description, String input) {
        assertSimpleTest(() -> {
            run(input);
            assertThat(output()).contains("Í≤∞Í≥º : 6");
        });
    }

    @Test
    void ÏùåÏàò_ÏûÖÎ†•() {
        assertSimpleTest(() ->
                assertThatThrownBy(() -> runException("-1,2,3"))
                        .isInstanceOf(IllegalArgumentException.class)
                        .hasMessage(ExceptionMessages.INVALID_CHARACTER_IN_INPUT)
        );
    }

    @Test
    void Îπà_Î¨∏ÏûêÏó¥_ÏûÖÎ†•() {
        assertSimpleTest(() -> {
            run("");
            assertThat(output()).contains("Í≤∞Í≥º : 0");
        });
    }

    @Test
    void Ïà´Ïûê_ÌïòÎÇò_ÏûÖÎ†•() {
        assertSimpleTest(() -> {
            run("1");
            assertThat(output()).contains("Í≤∞Í≥º : 1");
        });
    }

    @Test
    void Í≥µÎ∞±ÏùÑ_Íµ¨Î∂ÑÏûêÎ°ú_ÏûÖÎ†•() {
        assertSimpleTest(() -> {
            run("// \\n1 2 3");
            assertThat(output()).contains("Í≤∞Í≥º : 6");
        });

        assertSimpleTest(() -> {
            assertThatThrownBy(() -> runException("// \\n 1 2 3"))
                    .isInstanceOf(IllegalArgumentException.class)
                    .hasMessage(ExceptionMessages.NON_NUMERIC_VALUE);
        });
    }

    @Override
    public void runMain() {
        Application.main(new String[]{});
    }
}
