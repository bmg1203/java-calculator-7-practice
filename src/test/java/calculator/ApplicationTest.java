package calculator;

import camp.nextstep.edu.missionutils.test.NsTest;
import org.junit.jupiter.api.Test;

import static camp.nextstep.edu.missionutils.test.Assertions.assertSimpleTest;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

class ApplicationTest extends NsTest {

    @Test
    void 커스텀_구분자_사용() {
        assertSimpleTest(() -> {
            run("//;\\n1");
            assertThat(output()).contains("결과 : 1");
        });
    }

    @Test
    void 커스텀_구분자_사용2() {
        assertSimpleTest(() -> {
            run("//v\\n212341v512341v52162,51342:125124,5214:214551,612341:26325v25214v5214125v52142361v523451v432151");
            assertThat(output()).contains("결과 : 60149043");
        });
    }

    @Test
    void 커스텀_구분자_중복() {
        assertSimpleTest(() -> {
            run("//,\\n1,341,,512,43,23");
            assertThat(output()).contains("결과 : 920");
        });
    }

    @Test
    void 입력_없음() {
        assertSimpleTest(() -> {
            run("\n");
            assertThat(output()).contains("결과 : 0");
        });
    }

    @Test
    void 매우큰수_더하기() {
        assertSimpleTest(() -> {
            run("771205782374871271271283748971285907219857482931748172056283783748971285971283748971285907219857482931748172056283707219857482931748172056283709875871283748971285907219857482931748172056283771283748971285907219857482931748172056283771283748971285907219857482931748172056283748927185721389759218374892367589235892165829174298175891274032165689215721527138975821578912074120984715891234718590127482139758239078102758230148239795012347850432589103247548104839210521471771205782374871271271283748971285907219857482931748172056283783748971285971283748971285907219857482931748172056283707219857482931748172056283709875871283748971285907219857482931748172056283771283748971285907219857482931748172056283771283748971285907219857482931748172056283748927185721389759218374892367589235892165829174298175891274032165689215721527138975821578912074120984715891234718590127482139758239078102758230148239795012347850432589103247548104839210521471,123,100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n");
            assertThat(output()).contains("결과 : 871205782374871271271283748971285907219857482931748172056283783748971285971283748971285907219857482931748172056283707219857482931748172056283709875871283748971285907219857482931748172056283771283748971285907219857482931748172056283771283748971285907219857482931748172056283748927185721389759218374892367589235892165829174298175891274032165689215721527138975821578912074120984715891234718590127482139758239078102758230148239795012347850432589103247548104839210521471771205782374871271271283748971285907219857482931748172056283783748971285971283748971285907219857482931748172056283707219857482931748172056283709875871283748971285907219857482931748172056283771283748971285907219857482931748172056283771283748971285907219857482931748172056283748927185721389759218374892367589235892165829174298175891274032165689215721527138975821578912074120984715891234718590127482139758239078102758230148239795012347850432589103247548104839210521594");
        });
    }

    @Test
    void 예외_테스트() {
        assertSimpleTest(() ->
            assertThatThrownBy(() -> runException("-1,2,3"))
                .isInstanceOf(IllegalArgumentException.class)
        );
    }

    @Test
    void 예외_테스트2() {
        assertSimpleTest(() ->
                assertThatThrownBy(() -> runException("//fdal\\n"))
                        .isInstanceOf(IllegalArgumentException.class)
        );
    }

    @Test
    void 예외_테스트3() {
        assertSimpleTest(() ->
                assertThatThrownBy(() -> runException("//3\\n"))
                        .isInstanceOf(IllegalArgumentException.class)
        );
    }

    @Test
    void 예외_테스트4() {
        assertSimpleTest(() ->
                assertThatThrownBy(() -> runException("//%\\n%3%4f4"))
                        .isInstanceOf(IllegalArgumentException.class)
        );
    }

    @Override
    public void runMain() {
        Application.main(new String[]{});
    }
}
